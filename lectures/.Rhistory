# run this script after you've generated heatmap for ALL genes and retrieved genes from a particular cluster which contains all tcellGenes, and you want to genearte a heatmap just for those genes to get a better idea about how they clustered.
# notice that for gene cluster, eu and cr results are identical because it only matters for sample clustering.
rm(list=ls())
set.seed(13)
################################################
library(cluster)
library(gplots)
library(Biobase)
library(ctc)
library(ape)
library(RColorBrewer)
library(ggplot2)
library(clusterProfiler)
# library(RDAVIDWebService)
library(pathview)
library(org.Hs.eg.db) ## for human
library(org.Mm.eg.db) ## for mouse
genes = c('WNK3','RLIM','FRMD7','CFAP47','RBMX2','CENPE','RNF20','ANKRD44','OR2AG2','SLC22A23','TMEM132E','ZNF579','TTN','VMAC','FGG','PTCD2','GABRG1','SLC1A2','ZC2HC1A','ZNF260','RPS14','CUZD1','DDX41','MAST4','NRXN1','AMPD2','IGSF11','ERAP2','PNMA1','FRG1','MRFAP1L1','WNT3A','SOCS3','SKOR2','BSN','RP1','ZNF225','KIAA1109','SLC10A5','PLCB2','CDCA2','GLI3','RNF216','MRPL18','PPP1R16B','MTA2','HIVEP2','CWC27','CCDC191','PKHD1','MED23','IGSF3','LRP1','CHST3','CAPN5','SRP72','ZSCAN1','OXSM','SOGA1','RAP1GAP2','NLRC5','TAF6','CUL9','HCLS1','TMPO','DYRK1B','EED','ST18','MINPP1','FUT11','KMT2D','KIAA1328','KCTD10','TMEM205','UBA52','SPATA13','TDRD5','NSD1','MCF2L','ADGRB3','TRIB1','PRKD1','LPCAT4','LRRC34','MXI1','UNC79','TBC1D8','TTC17','KPNA1','SURF2','JAKMIP3','MATN2','HPS1','TRIM8','ADGB','ANKRD11')
genes.all.anno = bitr(genes, fromType='SYMBOL',
toType=c('ENTREZID'),
annoDb='org.Hs.eg.db', drop = T)
?bitr
genes = c('WNK3','RLIM','FRMD7','CFAP47','RBMX2','CENPE','RNF20','ANKRD44','OR2AG2','SLC22A23','TMEM132E','ZNF579','TTN','VMAC','FGG','PTCD2','GABRG1','SLC1A2','ZC2HC1A','ZNF260','RPS14','CUZD1','DDX41','MAST4','NRXN1','AMPD2','IGSF11','ERAP2','PNMA1','FRG1','MRFAP1L1','WNT3A','SOCS3','SKOR2','BSN','RP1','ZNF225','KIAA1109','SLC10A5','PLCB2','CDCA2','GLI3','RNF216','MRPL18','PPP1R16B','MTA2','HIVEP2','CWC27','CCDC191','PKHD1','MED23','IGSF3','LRP1','CHST3','CAPN5','SRP72','ZSCAN1','OXSM','SOGA1','RAP1GAP2','NLRC5','TAF6','CUL9','HCLS1','TMPO','DYRK1B','EED','ST18','MINPP1','FUT11','KMT2D','KIAA1328','KCTD10','TMEM205','UBA52','SPATA13','TDRD5','NSD1','MCF2L','ADGRB3','TRIB1','PRKD1','LPCAT4','LRRC34','MXI1','UNC79','TBC1D8','TTC17','KPNA1','SURF2','JAKMIP3','MATN2','HPS1','TRIM8','ADGB','ANKRD11')
genes.all.anno = bitr(genes, fromType='SYMBOL',
toType=c('ENTREZID'),
OrgDb='org.Hs.eg.db', drop = T)
genes
genes.all.anno
ego = enrichGO(gene          = genes.all.anno$ENTREZID,
organism = "human",
ont           = "BP",
pAdjustMethod = "fdr",
pvalueCutoff  = 0.05,
readable      = TRUE)
?enrichGO
ego = enrichGO(gene          = genes.all.anno$ENTREZID,
OrgDb='org.Hs.eg.db'
ont           = "BP",
pAdjustMethod = "fdr",
pvalueCutoff  = 0.05,
readable      = TRUE)
## GO over-representation test
ego = enrichGO(gene          = genes.all.anno$ENTREZID,
OrgDb='org.Hs.eg.db',
ont           = "BP",
pAdjustMethod = "fdr",
pvalueCutoff  = 0.05,
readable      = TRUE)
ego
summary(ego)
dim(genes.all.anno$ENTREZID)
kk =  enrichKEGG(gene          = genes.all.anno$ENTREZID,
OrgDb='org.Hs.eg.db',
pAdjustMethod = "fdr",
pvalueCutoff = 0.05,
readable = TRUE)
?enrichKEGG
kk =  enrichKEGG(gene          = genes.all.anno$ENTREZID,
organism = "hsa"
pAdjustMethod = "fdr",
pvalueCutoff = 0.1,
readable = TRUE)
kk =  enrichKEGG(gene          = genes.all.anno$ENTREZID,
organism = "hsa",
pAdjustMethod = "fdr",
pvalueCutoff = 0.1,
readable = TRUE)
kk =  enrichKEGG(gene          = genes.all.anno$ENTREZID,
organism = "hsa",
pAdjustMethod = "fdr",
pvalueCutoff = 0.1)
summary(kk)
genes = c('WNK3','RLIM','FRMD7','CFAP47','RBMX2','CENPE','RNF20','ANKRD44','OR2AG2','SLC22A23','TMEM132E','ZNF579','TTN','VMAC','FGG','PTCD2','GABRG1','SLC1A2','ZC2HC1A','ZNF260','RPS14','CUZD1','DDX41','MAST4','NRXN1','AMPD2','IGSF11','ERAP2','PNMA1','FRG1','MRFAP1L1','WNT3A','SOCS3','SKOR2','BSN','RP1','ZNF225','KIAA1109','SLC10A5','PLCB2','CDCA2','GLI3','RNF216','MRPL18','PPP1R16B','MTA2','HIVEP2','CWC27','CCDC191','PKHD1','MED23','IGSF3','LRP1','CHST3','CAPN5','SRP72','ZSCAN1','OXSM','SOGA1','RAP1GAP2','NLRC5','TAF6','CUL9','HCLS1','TMPO','DYRK1B','EED','ST18','MINPP1','FUT11','KMT2D','KIAA1328','KCTD10','TMEM205','UBA52','SPATA13','TDRD5','NSD1','MCF2L','ADGRB3','TRIB1','PRKD1','LPCAT4','LRRC34','MXI1','UNC79','TBC1D8','TTC17','KPNA1','SURF2','JAKMIP3','MATN2','HPS1','TRIM8','ADGB','ANKRD11')
genes.all.anno = bitr(genes, fromType='SYMBOL',
toType=c('ENTREZID'),
OrgDb='org.Hs.eg.db', drop = T)
ego = enrichGO(gene          = genes.all.anno$ENTREZID,
OrgDb='org.Hs.eg.db',
ont           = "BP",
pAdjustMethod = "fdr",
pvalueCutoff  = 1)
summary(ego)
kk =  enrichKEGG(gene          = genes.all.anno$ENTREZID,
organism = "hsa",
pAdjustMethod = "fdr",
pvalueCutoff = 1)
summary(kk)
kk =  enrichKEGG(gene          = genes.all.anno$ENTREZID,
organism = "hsa",
pAdjustMethod = "fdr",
pvalueCutoff = 1)
genes.all.anno$ENTREZID
kk =  enrichKEGG(gene          = genes.all.anno$ENTREZID,
organism = "hsa",
pAdjustMethod = "fdr",
pvalueCutoff = 1)
head(summary(kk))
genes = c('WNK3','RLIM','FRMD7','VPS13A','SCML2','KIAA2012','EEA1','CFAP47','RBMX2','CENPE','PLXNA3','RNF20','ANKRD44','LRRC43','OR2AG2','MTTP','SLC22A23','TMEM132E','ZNF579','FREM2','SETD1A','ZNF814','TTN','IL18R1','VMAC','FGG','SLC6A3','FGFR2','SLFN11','PTCD2','GABRG1','SLC1A2','ZC2HC1A','ZNF260','RPS14','CUZD1','DDX41','TBC1D2','MAST4','NRXN1','VPS37C','AMPD2','PRR11','TTN','IGSF11','ERAP2','PNMA1','C9orf129','FRG1','MRFAP1L1','WNT3A','EFTUD1','SOCS3','SKOR2','MSGN1','BSN','SDK1','LOC100129924','RP1','ZNF225','SH3RF3','TTN','PWP2','KIAA1109','SLC10A5','PLCB2','CDCA2','GLI3','RNF216','MRPL18','PPP1R16B','MTA2','HIVEP2','CWC27','CCDC191','PKHD1','MED23','IGSF3','LRP1','CHST3','THAP7','CAPN5','SRP72','ZSCAN1','OXSM','GAL3ST4','PNPLA7','C1orf61','NUP160','SOGA1','RAP1GAP2','NLRC5','TAF6','TNFSF9','ZFP36L2','CUL9','HCLS1','PCDH7','TMPO','DYRK1B','CERS2','EED','ST18','MINPP1','FUT11','KMT2D','NLRP4','KIAA1328','DPH7','KCTD10','TMEM205','UBA52','SPATA13','OR3A1','TDRD5','NSD1','MCF2L','ADGRB3','ELN','TRIB1','PRKD1','LPCAT4','LRRC34','MXI1','PARD6A','UNC79','TBC1D8','TTC17','KPNA1','SURF2','OR51F1','CACNA1C','JAKMIP3','EML4','MATN2','HPS1','TRIM8','ADGB','ANKRD11')
genes.all.anno = bitr(genes, fromType='SYMBOL',
toType=c('ENTREZID'),
OrgDb='org.Hs.eg.db', drop = T)
ego = enrichGO(gene          = genes.all.anno$ENTREZID,
OrgDb='org.Hs.eg.db',
ont           = "BP",
pAdjustMethod = "fdr",
pvalueCutoff  = 1)
ego
summary(ego)
-log(0.05)
-log10(0.05)
fisher.test(matrix(c(10,10,5,15)), nrow=2))
fisher.test(matrix(c(10,10,5,15)), nrow=2)
fisher.test(matrix(c(10,10,5,15), nrow=2))
fisher.test(matrix(c(15,5,5,15), nrow=2))
fisher.test(matrix(c(15,5,10,10), nrow=2))
fisher.test(matrix(c(15,5,12,8), nrow=2))
fisher.test(matrix(c(15,5,8,12), nrow=2))
fisher.test(matrix(c(15,5,7,13), nrow=2))
fisher.test(matrix(c(14,6,8,12), nrow=2))
fisher.test(matrix(c(15,5,8,12), nrow=2))
fisher.test(matrix(c(15,5,7,13), nrow=2))
fisher.test(matrix(c(12,8,7,13), nrow=2))
fisher.test(matrix(c(15,5,7,13), nrow=2))
fisher.test(matrix(c(15,5,5,15), nrow=2))
fisher.test(matrix(c(15,5,7,13), nrow=2))
fisher.test(matrix(c(16,4,7,13), nrow=2))
fisher.test(matrix(c(10,10,7,13), nrow=2))
fisher.test(matrix(c(10,10,5,15), nrow=2))
fisher.test(matrix(c(20,10,7,13), nrow=2))
fisher.test(matrix(c(20,10,10,20), nrow=2))
fisher.test(matrix(c(20,10,15,15), nrow=2))
fisher.test(matrix(c(20,10,12,18), nrow=2))
fisher.test(matrix(c(20,10,11,19), nrow=2))
fisher.test(matrix(c(20,10,10,20), nrow=2))
7/20
fisher.test(matrix(c(20,10,11,19), nrow=2))
11/30
my.data = matrix(c(38, 105, 4, 61), nrow=2))
my.data = matrix(c(38, 105, 4, 61), nrow=2)
fisher.test(my.data)
my.data = matrix(c(38, 105, 4, 61), nrow=2)
fisher.test(my.data)
my.data
my.data = matrix(c(38, 4, 105, 61), nrow=2)
my.data
fisher.test(my.data)
my.data = matrix(c(38, 105, 4, 61), nrow=2)
my.data
dimnames(my.data) = list(c('MT', 'WT'), c('inflamed', 'noninflamed'))
my.data
fisher.test(my.data)
1/0/75
1/0.75
2^1.5
log4(2000000000)+5
log(4,2000000000)+5
log(2000000000,4)+5
log4(2)
?log
log(100,4)
log(3000000000,4)
?t.test
t.test(c(1,2,3), c(3,4,5))
library(XCMS)
source("https://bioconductor.org/biocLite.R")
biocLite("CAMERA")
library(XCMS)
library("CAMERA")
library(xcms)
exit
source("https://bioconductor.org/biocLite.R")
biocLite()
source("https://bioconductor.org/biocLite.R")
biocLite("CAMERA")
rm(list = ls())
library(ComplexHeatmap)
library(cluster)
library(gplots)
library(Biobase)
library(ctc)
library(ape)
library(RColorBrewer)
library(ggplot2)
library(circlize)
7/12
9/11
fisher.test(matrix(c(28,12,9,27),nrow=2))
matrix(c(28, 12, 9, 27), nrow = 2)
fisher.test(matrix(c(51,10,9,45),nrow=2))
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE, eval=FALSE)
summary(cars)
summary(cars)
t.test
?t.test()
t.test(c(1,3,4),c(1,2,3))
?fisher.test
library(caret)
citation(caret)
citation('caret)
citation('caret)
citation('caret')
fisher.test(matrix(c(17,30,3,52),nrow=2))
fisher.test(matrix(c(19,11,26,26),nrow=2))
##-- Parameters
cancer <- 'DLBC'
fdr <- 0.05
fc <- 1.5
gene.type <- 'coding'
caller <- 'deseq2'
group1 <- 'KO'
group2 <- 'WT'
colors <- c('#CC0000', '#00CC00')
##-- Set up working directory
work.dir <- '.'
setwd(work.dir)
##-- Input/Output directories
in.dir <- '../cheatsheets/ipynb_data/input'
out.dir <- '../cheatsheets/ipynb_data/output'
##-- Input/Output files
expr.file <- paste0(cancer, '.raw_counts.tsv')
sample.file <- paste0(cancer, '.sample_group.tsv')
geneinfo.file <- 'gencode.v24.primary_assembly.annotation.gtf.geneinfo'
print(paste0('Cancer = ', cancer))
print(paste0('gene type = ', gene.type))
print(paste0('DEG fdr cutoff = ', fdr))
print(paste0('DEG fc cutoff = ', fc))
print(paste0('Expression file = ', expr.file))
print(paste0('Sample group file  = ', sample.file))
print(paste0('Gene info file  = ', geneinfo.file))
##-- Read data files
data.expr <- read.delim(paste0(in.dir, '/', expr.file),
header = TRUE, stringsAsFactors=FALSE)
data.sample <- read.delim(paste0(in.dir, '/', sample.file),
header = TRUE, stringsAsFactors=FALSE)
data.geneinfo <- read.delim(paste0(in.dir, '/', geneinfo.file),
header = TRUE, stringsAsFactors = FALSE)
##-- Expression matrix: raw read counts
print(paste0('Expression matrix = ',
nrow(data.expr), ' genes, ',
ncol(data.expr), ' fields'))
data.expr[1:3,]
##-- Sample table: experimental design & groups
print(paste0('Sample table = ',
nrow(data.sample), ' samples, ',
length(table(data.sample$Group)), ' groups'))
data.sample
##-- Gene annotation
print(paste0('Gene annotation = ',
nrow(data.geneinfo), ' genes, ',
ncol(data.geneinfo), ' fields'))
head(data.geneinfo)
data.expr.proc <- data.expr
data.sample.proc <- data.sample
data.geneinfo.proc <- data.geneinfo
##-- Set up row names of each data frame
row.names(data.expr.proc) <- data.expr.proc[,1]
row.names(data.sample.proc) <- data.sample.proc[,1]
row.names(data.geneinfo.proc) <- data.geneinfo.proc[,1]
##-- Expression matrix: remove extra columns
# colnames(data.expr.proc)
data.expr.proc <- data.expr.proc[,c(1,7:12)]
colnames(data.expr.proc)[1] <- 'Gene'
##-- Expression matrix: add gene symbol to Ensembl geneid
##-- from annotation
print(sum(data.expr.proc$Gene %in% data.geneinfo.proc$gene_id)
== nrow(data.expr.proc))
data.expr.proc <- merge(data.geneinfo.proc[,c('gene_id',
'gene_name')],
data.expr.proc, by = 'row.names')
##-- Expression matrix: concat gene symbol & Ensembl id
##-- as unique key for each gene row
data.expr.proc$Gene <- paste0(data.expr.proc$gene_name,
'!', data.expr.proc$gene_id)
data.expr.proc <- data.expr.proc[,-c(1:3)]
row.names(data.expr.proc) <- data.expr.proc[,1]
data.expr.proc <- data.expr.proc[,-1]
##-- Expression matrix: peek into preprocessed data
data.expr.proc[1:3,]
##-- Gene annotation: show gene types
data.frame(table(data.geneinfo.proc$gene_type))
##-- Gene annotation: retrieve Ensembl id only
data.geneinfo.proc.gene <- data.geneinfo.proc[,c(1,2,4)]
data.geneinfo.proc.gene <- unique(data.geneinfo.proc.gene)
print(paste0('Total genes = ', nrow(data.geneinfo.proc.gene)))
##-- Gene annotation: concat gene symbol & Ensembl id
##-- as unique key for each gene row
data.geneinfo.proc.gene <- data.frame(Key =
paste0(data.geneinfo.proc.gene$gene_name,'!',
data.geneinfo.proc.gene$gene_id),
data.geneinfo.proc.gene)
row.names(data.geneinfo.proc.gene) <- data.geneinfo.proc.gene[,1]
data.geneinfo.proc <- data.geneinfo.proc[,-1]
##-- Gene annotation: keep two types of genes,
##-- coding and lincRNA, for further analysis
gene.coding <- data.geneinfo.proc.gene[
data.geneinfo.proc.gene$gene_type == 'protein_coding',]
gene.lincrna <- data.geneinfo.proc[
data.geneinfo.proc.gene$gene_type == 'lincRNA',]
##-- Gene annotation: show how many genes are in each list
print(paste0('Coding genes = ', nrow(gene.coding)))
print(paste0('lincRNA genes = ', nrow(gene.lincrna)))
data.sample.proc.sub <- data.sample.proc
##-- Expression matrix: select gene rows
##-- based on specified gene type (coding or lincrna)
gene.list <- ''
if(gene.type == 'coding') { gene.list <- gene.coding  }
if(gene.type == 'lincrna') { gene.list <- gene.lincrna }
data.expr.proc.sub <- data.expr.proc[
row.names(data.expr.proc) %in% row.names(gene.list),]
##-- Expression matrix: sort matrix sample column
##-- to be consistent with sample table
##--(required for DEG analysis)
data.expr.proc.sub <- data.expr.proc.sub[,data.sample.proc.sub$Sample]
# data.expr = data.expr.proc.sub
# save(data.expr, file = paste0(paste0(out.dir, '/', caller, '/', expr.file, '.coding.Data')))
write.table(data.expr.proc.sub,
file = paste0(out.dir, '/', caller, '/', expr.file, '.coding.tsv'),
col.names = TRUE, row.names = TRUE, quote = FALSE, sep = '\t')
data.sample.proc.sub <- data.sample.proc
##-- Expression matrix: select gene rows
##-- based on specified gene type (coding or lincrna)
gene.list <- ''
if(gene.type == 'coding') { gene.list <- gene.coding  }
if(gene.type == 'lincrna') { gene.list <- gene.lincrna }
data.expr.proc.sub <- data.expr.proc[
row.names(data.expr.proc) %in% row.names(gene.list),]
##-- Expression matrix: sort matrix sample column
##-- to be consistent with sample table
##--(required for DEG analysis)
data.expr.proc.sub <- data.expr.proc.sub[,data.sample.proc.sub$Sample]
# data.expr = data.expr.proc.sub
# save(data.expr, file = paste0(paste0(out.dir, '/', caller, '/', expr.file, '.coding.Data')))
write.table(data.expr.proc.sub,
file = paste0(out.dir, '/', caller, '/',
gsub('.tsv','',expr.file), '.coding.tsv'),
col.names = TRUE, row.names = TRUE, quote = FALSE, sep = '\t')
data.sample.proc.sub <- data.sample.proc
##-- Expression matrix: select gene rows
##-- based on specified gene type (coding or lincrna)
gene.list <- ''
if(gene.type == 'coding') { gene.list <- gene.coding  }
if(gene.type == 'lincrna') { gene.list <- gene.lincrna }
data.expr.proc.sub <- data.expr.proc[
row.names(data.expr.proc) %in% row.names(gene.list),]
##-- Expression matrix: sort matrix sample column
##-- to be consistent with sample table
##--(required for DEG analysis)
data.expr.proc.sub <- data.expr.proc.sub[,data.sample.proc.sub$Sample]
# data.expr = data.expr.proc.sub
# save(data.expr, file = paste0(paste0(out.dir, '/', caller, '/', expr.file, '.coding.Data')))
write.table(data.expr.proc.sub,
file = paste0(out.dir, '/', caller, '/', expr.file, '.coding.tsv'),
col.names = TRUE, row.names = TRUE, quote = FALSE, sep = '\t')
print(paste0('Gene list = ',
nrow(gene.list), ' (', gene.type, ')'))
print(paste0('Expression matrix before subsetting: ',
nrow(data.expr.proc), ' genes'))
print(paste0('Expression matrix after subsetting: ',
nrow(data.expr.proc.sub), ' genes'))
out.prefix <- paste0(out.dir, '/', caller, '/',cancer,'.',
gene.type, '.', caller)
##-- DESeq2: note data.sample.proc.sub must
##-- have the same sample column
##-- order as data.expr.proc.sub
Group <- as.factor(data.sample.proc.sub$Group)
##-- DESeq2: covert to matrix data format (previously was data frame)
cds <- as.matrix(data.expr.proc.sub)
##-- DESeq2: build DESeqDataSet object, prepare design matrix
dds <- DESeqDataSetFromMatrix(countData = cds,
colData = data.sample.proc.sub,
design = ~ Group)
library(DESeq2)
out.prefix <- paste0(out.dir, '/', caller, '/',cancer,'.',
gene.type, '.', caller)
##-- DESeq2: note data.sample.proc.sub must
##-- have the same sample column
##-- order as data.expr.proc.sub
Group <- as.factor(data.sample.proc.sub$Group)
##-- DESeq2: covert to matrix data format (previously was data frame)
cds <- as.matrix(data.expr.proc.sub)
##-- DESeq2: build DESeqDataSet object, prepare design matrix
dds <- DESeqDataSetFromMatrix(countData = cds,
colData = data.sample.proc.sub,
design = ~ Group)
##-- DESeq2: note this is just simple filter to reduce mem
##-- no affect on DEG results
# dim(dds)
# dds <- dds[ rowSums(counts(dds)) > 0, ]
# dim(dds)
##-- DESeq2: plot estimated dispersions
# pdf(paste0(out.prefix, '.dispersion.pdf'),width = 7, height = 7)
# plotDispEsts(dds, xlim = c(1,10000), ylim = c(1E-10, 1))
# dev.off()
print(dds)
##-- DESeq2: three normalization algrithms (rld, vsd and vsd.fast)
rld <- rlog(dds, blind=FALSE)
vsd <- varianceStabilizingTransformation(dds, blind=FALSE)
# vsd.fast <- vst(dds, blind=FALSE)
##-- DESeq2: peek into normalized expression matrix
head(assay(rld), 3)
head(assay(vsd), 3)
##-- DESeq2: print normalized expression matrix to local files
write.table(data.frame(Gene = row.names(assay(rld)), assay(rld)),
file = paste0(out.prefix, '.rld.txt'),
sep = '\t', col.names = TRUE, row.names = FALSE, quote = FALSE)
write.table(data.frame(Gene = row.names(assay(vsd)), assay(vsd)),
file = paste0(out.prefix, '.vsd.txt'),
sep = '\t', col.names = TRUE, row.names = FALSE, quote = FALSE)
##-- Set up R plot display options in notebook
options(jupyter.plot_mimetypes = "image/svg+xml")
options(repr.plot.width = 6, repr.plot.height = 5)
##-- DESeq2: remove genes not expressed in any samples
##-- for plottig purposes
notAllZero <- (rowSums(counts(dds))>0)
##-- DESeq2: mean to var plots
# pdf(paste0(out.prefix, '.meanvar.log2.pdf'),width = 7, height = 7)
meanSdPlot(log2(counts(estimateSizeFactors(dds),
normalized=TRUE)[notAllZero,] + 1))
cpan.pkg.list
##-- List packages required in this analysis
cpan.pkg.list <- c('ggplot2', 'scales', 'ape', 'RColorBrewer',
'reshape','VennDiagram')
bioc.pkg.list <- c('ctc',  'limma', 'edgeR', 'DESeq2', 'vsn',
'genefilter', 'pheatmap',
'clusterProfiler', 'pathview',
'AnnotationHub')
##-- Set up CPAN repo (required if running IRkernel in Jupyter)
cpan.repos <- 'https://cran.us.r-project.org'
##-- Install CPAN packages
# install.packages('ggplot2', repos=cpan.repos)
# lapply(cpan.pkg.list, suppressMessages(install.packages),
#        repos=cpan.repos, character.only = TRUE)
##-- Set up Bioconductor repo
source("https://bioconductor.org/biocLite.R")
##-- Install Bioc packages
biocLite('DESeq2')
# lapply(bioc.pkg.list, suppressMessages(biocLite),
#        character.only = TRUE)
##-- List packages required in this analysis
cpan.pkg.list <- c('ggplot2', 'scales', 'ape', 'RColorBrewer',
'reshape','VennDiagram')
bioc.pkg.list <- c('ctc',  'limma', 'edgeR', 'DESeq2', 'vsn',
'genefilter', 'pheatmap',
'clusterProfiler', 'pathview',
'AnnotationHub')
##-- Set up CPAN repo (required if running IRkernel in Jupyter)
cpan.repos <- 'https://cran.us.r-project.org'
##-- Install CPAN packages
install.packages('ggplot2', repos=cpan.repos)
lapply(cpan.pkg.list, suppressMessages(install.packages),
repos=cpan.repos, character.only = TRUE)
##-- Set up Bioconductor repo
source("https://bioconductor.org/biocLite.R")
##-- Install Bioc packages
biocLite('DESeq2')
lapply(bioc.pkg.list, suppressMessages(biocLite),
character.only = TRUE)
rm(list=ls())
ptm <- proc.time()
##-- List packages required in this analysis
cpan.pkg.list <- c('ggplot2', 'scales', 'ape', 'RColorBrewer',
'reshape','VennDiagram')
bioc.pkg.list <- c('ctc',  'limma', 'edgeR', 'DESeq2', 'vsn',
'genefilter', 'pheatmap',
'clusterProfiler', 'pathview',
'AnnotationHub')
##-- Set up CPAN repo (required if running IRkernel in Jupyter)
cpan.repos <- 'https://cran.us.r-project.org'
##-- Install CPAN packages
install.packages('ggplot2', repos=cpan.repos)
lapply(cpan.pkg.list, suppressMessages(install.packages),
repos=cpan.repos, character.only = TRUE)
install.packages("ggplot2", repos = cpan.repos)
##-- Load libraries
for(pkg in c(cpan.pkg.list, bioc.pkg.list)) {
print(pkg)
suppressMessages(library(pkg, character.only = TRUE))
}
biocLite('vsn')
source("https://bioconductor.org/biocLite.R")
biocLite('vsn')
##-- Load libraries
for(pkg in c(cpan.pkg.list, bioc.pkg.list)) {
print(pkg)
suppressMessages(library(pkg, character.only = TRUE))
}
##-- List packages required in this analysis
cpan.pkg.list <- c('ggplot2', 'scales', 'ape', 'RColorBrewer',
'reshape','VennDiagram')
bioc.pkg.list <- c('ctc',  'limma', 'edgeR', 'DESeq2', 'vsn',
'genefilter', 'pheatmap',
'clusterProfiler', 'pathview',
'AnnotationHub')
##-- Set up CPAN repo (required if running IRkernel in Jupyter)
cpan.repos <- 'https://cran.us.r-project.org'
##-- Install CPAN packages
# install.packages('ggplot2', repos=cpan.repos)
# lapply(cpan.pkg.list, suppressMessages(install.packages),
#        repos=cpan.repos, character.only = TRUE)
##-- Set up Bioconductor repo
source("https://bioconductor.org/biocLite.R")
##-- Install Bioc packages
# biocLite('DESeq2')
for(pkg in bioc.pkg.list) {
print(pkg)
biocLite(pkg, character.only = TRUE)
}
